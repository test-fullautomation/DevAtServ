name: Build DevAtServ

on:
  push:
    tags:
      - "rel/das/*.*.*.*"
      - "dev/das/*.*.*.*"
  pull_request:
    types:
      - closed
      - opened
      - synchronize
    branches:
    - develop

  workflow_dispatch:

env:
  GITHUB_PAT: ${{ secrets.PAT_GITHUB }} 
  TRIGGER_BY: ${{ github.ref_type }}
  TAG_NAME: ${{ github.ref_name }}
  REF_NAME: ${{ github.ref_name }}

jobs:
  tag-repos:
    name: Tag all related repositories
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'
    steps:
    - name: Checkout source   
      uses: actions/checkout@v4

    - name: Install dependencies
      run: python -m pip install -r ./tools/git-tag/requirements.txt

    - name: Tag repositories
      run: python ./tools/git-tag/git-tag.py "$TAG_NAME" ./config/repositories/tag_repos.json


  build-devatserv-GUI:
    name: DevAtServ's GUI
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    needs: [ tag-repos ]
    if: ${{ ! failure() && ! cancelled() }}
    defaults:
      run:
        working-directory: ./python-microservice-base/MicroserviceBase/MicroserviceManagerGUI
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Clone python-microservice-base
        uses: GuillaumeFalourd/clone-github-repo-action@v2.3
        with:
          depth: 1
          branch: 'htv3hc/feat/release-microservice-base-gui'
          owner: 'test-fullautomation'
          repository: 'python-microservice-base'

      - name: Run npm install
        run: npm install

      - name: Run npm dist
        run: |
          npm run dist
    
      - name: Upload all DevAtServ's GUI Unbuntu artifacts.
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: das-gui-artifact-deb
          path: ./python-microservice-base/MicroserviceBase/MicroserviceManagerGUI/dist/*.deb

      - name: Upload all DevAtServ's GUI Windows artifacts.
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: das-gui-artifact-exe
          path: ./python-microservice-base/MicroserviceBase/MicroserviceManagerGUI/dist/*.exe
  
          
  build-devatserv-services:
    name: DevAtServ Services
    runs-on: ubuntu-latest
    needs: [ tag-repos ]
    if: ${{ ! failure() && ! cancelled() }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Starting all services
        run: |
          chmod +x ./install.sh
          ./install.sh

      - name: Upload Docker Images Zip
        uses: actions/upload-artifact@v4
        with:
          name: devatserv-images
          path: devatserv_images.zip


  deploy-devatserv-linux:
    name: DevAtServ tool Linux
    runs-on: ubuntu-latest
    needs: [ build-devatserv-GUI , build-devatserv-services ]
    if: ${{ ! failure() && ! cancelled() }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download DevAtServ's GUI on Unbuntu
        uses: actions/download-artifact@v4
        with:
          name: das-gui-artifact-deb
      
      - name: Download DevAtServ Services
        uses: actions/download-artifact@v4
        with:
          name: devatserv-images   

      - name: Build DevAtServ
        run: |
          echo "DAS_VERSION_DATE=$(date +%m.%Y)" >> $GITHUB_ENV
          echo "DAS_VERSION=${TAG_NAME#[rd]e[vl]/das/}" >> $GITHUB_ENV
          chmod +x ./build.sh
          ./build.sh

      - name: Upload Debian package
        uses: actions/upload-artifact@v4
        with:
          name: devatserv-linux-package
          path: output_Linux/*.deb


  deploy-devatserv-windows:
    name: DevAtServ tool Windows
    runs-on: windows-latest
    needs: [ build-devatserv-GUI , build-devatserv-services ]
    if: ${{ ! failure() && ! cancelled() }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download DevAtServ's GUI on Windows
        uses: actions/download-artifact@v4
        with:
          name: das-gui-artifact-exe
      
      - name: Download DevAtServ Services
        uses: actions/download-artifact@v4
        with:
          name: devatserv-images

      - name: Build DevAtServ
        shell: bash
        run: |
          echo "DAS_VERSION_DATE=$(date +%m.%Y)" >> $GITHUB_ENV
          echo "DAS_VERSION=${TAG_NAME#[rd]e[vl]/das/}" >> $GITHUB_ENV
          chmod +x ./build.sh
          ./build.sh

      - name: Upload Exe package
        uses: actions/upload-artifact@v4
        with:
          name: devatserv-windows-package
          path: output_Windows/*.exe

  release:
    name: Release DAS
    runs-on: ubuntu-latest
    needs: [deploy-devatserv-linux, deploy-devatserv-windows]
    if: ${{ ! failure() && ! cancelled() && github.ref_type == 'tag' && startsWith(github.ref, 'refs/tags/rel/aio/') }}

    steps:
    - name: Download artifact from build workflow
      uses: actions/download-artifact@v3

    - name: Get released file names
      run: |
        echo "EXE_FILE=$(ls windows-package/*.exe | head -1)" >> $GITHUB_ENV
        echo "DEB_FILE=$(ls linux-package/*.deb | head -1)" >> $GITHUB_ENV
        echo "RELEASE_INFO_FILE=$(ls windows-aiotestlogfiles/release_info_RobotFramework_AIO_${TAG_NAME#rel/aio/}.html)" >> $GITHUB_ENV
        echo "RELEASE_VERSION=${TAG_NAME#rel/aio/}" >> $GITHUB_ENV

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.TAG_NAME }}
        release_name: RobotFramework AIO version ${{ env.RELEASE_VERSION }}
        draft: false
        prerelease: false

    - name: Upload Windows Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.EXE_FILE }}
        asset_name: setup_RobotFramework_AIO_Win_${{ env.RELEASE_VERSION }}.exe
        asset_content_type: application/octet-stream

    - name: Upload Linux Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.DEB_FILE }}
        asset_name: setup_RobotFramework_AIO_Linux_${{ env.RELEASE_VERSION }}.deb
        asset_content_type: application/vnd.debian.binary-package
    
    - name: Upload Release Info Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.RELEASE_INFO_FILE }}
        asset_name: release_info_RobotFramework_AIO_${{ env.RELEASE_VERSION }}.html
        asset_content_type: text/html